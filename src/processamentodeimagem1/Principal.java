/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Principal.java
 *
 * Created on 04/07/2011, 14:46:27
 */

package processamentodeimagem1;

import com.sun.image.codec.jpeg.ImageFormatException;
import java.awt.BorderLayout;
import java.awt.Container;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import marvin.gui.MarvinImagePanel;
import marvin.image.MarvinImage;
import marvin.image.MarvinImageMask;
import marvin.io.MarvinImageIO;
import marvin.plugin.MarvinImagePlugin;
import marvin.util.MarvinPluginLoader;
import com.pearsoneduc.ip.op.Histogram;
import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageDecoder;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author cciuenf
 */
public class Principal extends javax.swing.JFrame {

    static MarvinImagePanel imagemPainel;
     static MarvinImage imagem,backupImagem;
    static MarvinImagePlugin imagePlugin;
    static Container l_c;

    /** Creates new form Principal */
    public Principal() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selecionadorArquivo = new javax.swing.JFileChooser();
        painelImagem = new javax.swing.JPanel();
        menuFerramentas = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        itemAbrir = new javax.swing.JMenuItem();
        itemSair = new javax.swing.JMenuItem();
        menuFiltro = new javax.swing.JMenu();
        subMenuHistograma = new javax.swing.JMenu();
        itemHistogramaEscaladeCinza = new javax.swing.JMenuItem();
        itemBrilhoeContraste = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        itemGlobal = new javax.swing.JMenuItem();
        itemRegional = new javax.swing.JMenuItem();
        itemPontual = new javax.swing.JMenuItem();
        menuSobre = new javax.swing.JMenu();
        itemSobre = new javax.swing.JMenuItem();

        selecionadorArquivo.setVisible(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Processamento de Imagem 1");

        javax.swing.GroupLayout painelImagemLayout = new javax.swing.GroupLayout(painelImagem);
        painelImagem.setLayout(painelImagemLayout);
        painelImagemLayout.setHorizontalGroup(
            painelImagemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );
        painelImagemLayout.setVerticalGroup(
            painelImagemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
        );

        menuArquivo.setText("Arquivo");

        itemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        itemAbrir.setText("Abrir");
        itemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAbrirActionPerformed(evt);
            }
        });
        menuArquivo.add(itemAbrir);

        itemSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        itemSair.setText("Sair");
        itemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSairActionPerformed(evt);
            }
        });
        menuArquivo.add(itemSair);

        menuFerramentas.add(menuArquivo);

        menuFiltro.setText("Filtro");

        subMenuHistograma.setText("Histograma");

        itemHistogramaEscaladeCinza.setText("Escala de Cinza");
        itemHistogramaEscaladeCinza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemHistogramaEscaladeCinzaActionPerformed(evt);
            }
        });
        subMenuHistograma.add(itemHistogramaEscaladeCinza);

        menuFiltro.add(subMenuHistograma);

        itemBrilhoeContraste.setText("Brilho e Contraste");
        itemBrilhoeContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemBrilhoeContrasteActionPerformed(evt);
            }
        });
        menuFiltro.add(itemBrilhoeContraste);

        jMenu1.setText("Equalização");

        itemGlobal.setText("Global");
        itemGlobal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGlobalActionPerformed(evt);
            }
        });
        jMenu1.add(itemGlobal);

        itemRegional.setText("Regional");
        jMenu1.add(itemRegional);

        itemPontual.setText("Pontual");
        jMenu1.add(itemPontual);

        menuFiltro.add(jMenu1);

        menuFerramentas.add(menuFiltro);

        menuSobre.setText("Ajuda");

        itemSobre.setText("Sobre");
        itemSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSobreActionPerformed(evt);
            }
        });
        menuSobre.add(itemSobre);

        menuFerramentas.add(menuSobre);

        setJMenuBar(menuFerramentas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(painelImagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(181, 181, 181))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(painelImagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAbrirActionPerformed
        /*
        selecionadorArquivo.setVisible(true);
        int returnVal = selecionadorArquivo.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = selecionadorArquivo.getSelectedFile();

            imagePanel = new MarvinImagePanel();

            Container l_c = getContentPane(); 
            l_c.setLayout(new BorderLayout()); 
            l_c.add(imagePanel, BorderLayout.NORTH);

            image = MarvinImageIO.loadImage(file.getAbsolutePath());
            backupImage = image.clone();         
            imagePanel.setImage(image);
        }
         */
    }//GEN-LAST:event_itemAbrirActionPerformed

    private void itemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_itemSairActionPerformed

    private void itemSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSobreActionPerformed
         new Sobre().setVisible(true);
    }//GEN-LAST:event_itemSobreActionPerformed

    private void itemHistogramaEscaladeCinzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemHistogramaEscaladeCinzaActionPerformed
        imagem = backupImagem.clone();
        imagePlugin = MarvinPluginLoader.loadImagePlugin("org.marvinproject.image.histogram.grayHistogram.jar");
        imagePlugin.process(imagem,imagem,null,MarvinImageMask.NULL_MASK, false);
    }//GEN-LAST:event_itemHistogramaEscaladeCinzaActionPerformed

    private void itemBrilhoeContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemBrilhoeContrasteActionPerformed
        imagem = backupImagem.clone();
        imagePlugin = MarvinPluginLoader.loadImagePlugin("org.marvinproject.image.color.brightnessAndContrast.jar");
        imagePlugin.setImagePanel(imagemPainel);
        imagePlugin.show();
    }//GEN-LAST:event_itemBrilhoeContrasteActionPerformed

    private void itemGlobalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGlobalActionPerformed
        try {
            FileInputStream fileStream = new FileInputStream("./imagem2.jpg");
            JPEGImageDecoder input = JPEGCodec.createJPEGDecoder(fileStream);
            BufferedImage image = input.decodeAsBufferedImage();
            Histogram histogram = new Histogram(image);
            EqualiseOp equalise = new EqualiseOp(histogram);
            BufferedImage equalisedImage = equalise.filter(image, null);
            JLabel view = new JLabel(new ImageIcon(equalisedImage));
            ImageCanvas imageCanvas = new ImageCanvas(equalisedImage);
            imagemPainel.add(imageCanvas);
        } catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_itemGlobalActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);

                imagemPainel = new MarvinImagePanel();

                l_c = painelImagem;
                l_c.setLayout(new BorderLayout());
                l_c.add(imagemPainel, BorderLayout.NORTH);

                imagem = MarvinImageIO.loadImage("./imagem.jpg");
                backupImagem = imagem.clone();
                imagemPainel.setImage(imagem);

                imagem = backupImagem.clone();
                imagePlugin = MarvinPluginLoader.loadImagePlugin("org.marvinproject.image.color.grayScale.jar");
                imagePlugin.process(imagem, imagem, null, MarvinImageMask.NULL_MASK, false);
                imagem.update();
                imagemPainel.setImage(imagem);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem itemAbrir;
    private javax.swing.JMenuItem itemBrilhoeContraste;
    private javax.swing.JMenuItem itemGlobal;
    private javax.swing.JMenuItem itemHistogramaEscaladeCinza;
    private javax.swing.JMenuItem itemPontual;
    private javax.swing.JMenuItem itemRegional;
    private javax.swing.JMenuItem itemSair;
    private javax.swing.JMenuItem itemSobre;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenuBar menuFerramentas;
    private javax.swing.JMenu menuFiltro;
    private javax.swing.JMenu menuSobre;
    private static javax.swing.JPanel painelImagem;
    private javax.swing.JFileChooser selecionadorArquivo;
    private javax.swing.JMenu subMenuHistograma;
    // End of variables declaration//GEN-END:variables

}
